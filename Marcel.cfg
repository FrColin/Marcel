# Marcel.cfg
#	This file contains the configuration for Marcel

# Global settings
# URL to reach the broker
Broker: {
	Host = "localhost",
	Port = 1883,
	# ClientID to connect to the broker
	# If you have more than one Marcel connected to a single broker
	# you MUST set an uniq ID per Marcel instance.
	#ClientID = "Marcel"
	# Crash if we lost the connection with the broker
	ConnectionLostIsFatal = true
}
Alert: {
	# SMS alerting
	# the provided URL is for Freemobile.
	SMSUrl = "https://smsapi.free-mobile.fr/sendmsg?user=xxxxxxxx&pass=xxxxxxxxxxxxxx&msg=%s"
	# replace xxxx by your account granting
	# %s will be replaced by the message to send
	# PLEASE SHARE IF YOU ADDAPT FOR OTHER ISP.

	#send alert as mail
	# %t is replaced by the title
	# The message body is put in stdin
	AlertCommand = "mail -s %t mail@domain.com"
}
plugins : {
OneWire: {
# Read 1Wire device exposed as ownet using alias 
# open a "file float value" file
# Devcice : device to read
# Sample : Delay b/w sample. 
#	If not present (or 0), will be grouped in the same thread as the previous one
Sample = 30
Devices :  (
            {
				Title = "Bureau",
				Device = "TEMP1/temperature",
                Topic = "maison/Temperature/Bureau";
                Sample = 30;
            },
			{
				Title = "Garage",
				Device = "TEMP2/temperature",
                Topic = "maison/Temperature/Garage";
                Sample = 30;
            },
			{
				Title = "Exterieur",
				Device = "TEMP3/temperature",
                Topic = "maison/Temperature/Exterieur";
                Sample = 30;
            }
#			{
#				Title = "Cave",
#				Device = "TEMP4/temperature",
#                Topic = "maison/Temperature/Cave";
#                Sample = 30;
#            }
        )
},
# Read Freebox statistics
FreeboxOS: {
	Topic = "Freebox",
	TokenFile = "freebox_app_token.txt",
	urls = [
	#"connection/xdsl",
	#"connection/config",
	#"call/log",
	"connection"
	],
	Sample = 60
},
# Read UPS figures
# argument of the section is the UPS name as defined in NUT
# Host : host where NUT is running
# Port : on which port it is reachable
# Var : list of NUT variables to export
Ups: {
	Topic = "ups",
	Sample = 15,
	Name = "ups",
	Host = "localhost",
	Port = 3493
	variables = [
	"ups.load",
	"ups.realpower.nominal",
	"battery.charge",
	"battery.charge.warning",
	"input.voltage",
	"input.transfer.high",
	"input.transfer.low"
	]
},
#
Meteo2 : {
# Query short term meteo from OpenWeatherMap.org
# Argument is a free comment
# Topic : Root for published data
# Sample : delay b/w 2 queries in seconds (minimum is 600s)
# City : CityName,Country (mandatory)
# Unit : metric (default), imperial or Standard
# Lang : language (almost)
#
# Have a look on OpenWeatherMap.org for explanation of all fields values
	Meteo3H : {
		Topic = "Meteo3H/Paris",
		Sample = 1800,
		City = "Paris,fr",
		Units = "metric",
		Lang = "fr"
	}

# Query Daily meteo from OpenWeatherMap.org
# Argument is a free comment
# Topic : Root for published data
# Sample : delay b/w 2 queries in seconds (minimum is 600s)
# City : CityName,Country (mandatory)
# Unit : metric (default), imperial or Standard
# Lang : language (almost)
#
# Have a look on OpenWeatherMap.org for explanation of all fields values
	MeteoDaily: {
		Topic = "Meteo/Paris",
		Sample = 1800,
		City = "Paris,fr",
		Units = "metric",
		Lang = "fr"
	}
},
Scripts: {
	# User functions definition
	# used for DPD & Every
	UserFuncScript = "scripts/AllVerif.lua"
	# Call a function 'Every' seconds
	# Argument of the section is passed as argument to the called function
	# (may be overwriten by 'Topic=' but some bytes are lost in this case)
	Every: (
		{
		Title = "Publish system load",
		Sample = 15,
		Func = "PublishLoad"
		},
		{
		Title = "Publish Freebox call",
		Sample = 15,
		Func = "FreeboxCall"
		}
	)
	# Alerting if some figures don't come
	# (dead publisher detection)
	# argument of the section is the error identifier
	# Topic=Topic to wait data from
	# Sample=Timeout to raise an error
	Dpds: (
		#{
		#DPD = "Dpd test",
		#Topic = "Test",
		#Sample = 10
		#},
	# User defined checking function
		{
		DPD = "UPS battery charge",
		Topic = "ups/battery.charge",
		Func = "UPSBatCharge",
		}
	)
}

}

